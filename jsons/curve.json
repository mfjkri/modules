{
  "animate_3D_curve": "<div><h4>animate_3D_curve(duration: number, fps: number, drawer: RenderFunction, func: CurveAnimation) → {AnimatedCurve}</h4><div class=\"description\"><p>Create a animation of curves using a curve generating function.</p></div></div>",
  "animate_curve": "<div><h4>animate_curve(duration: number, fps: number, drawer: RenderFunction, func: CurveAnimation) → {AnimatedCurve}</h4><div class=\"description\"><p>Create a animation of curves using a curve generating function.</p></div></div>",
  "arc": "<div><h4>arc(t: number) → {Point}</h4><div class=\"description\"><p>This function is a curve: a function from a fraction t to a point. The points  \nlie on the right half of the unit circle. They start at Point (0,1) when t is  </p><ol start=\"0\"><li>When t is 0.5, they reach Point (1,0), when t is 1, they reach Point  \n(0, -1).</li></ol></div></div>",
  "b_of": "<div><h4>b_of(pt: Point) → {number}</h4><div class=\"description\"><p>Retrieves the blue component of a given Point.</p></div></div>",
  "connect_ends": "<div><h4>connect_ends(curve1: Curve, curve2: Curve) → {Curve}</h4><div class=\"description\"><p>This function is a binary Curve operator: It takes two Curves as arguments  \nand returns a new Curve. The two Curves are combined by using the full first  \nCurve for the first portion of the result and by using the full second Curve  \nfor the second portion of the result. The second Curve is translated such  \nthat its point at fraction 0 is the same as the Point of the first Curve at  \nfraction 1.</p></div></div>",
  "connect_rigidly": "<div><h4>connect_rigidly(curve1: Curve, curve2: Curve) → {Curve}</h4><div class=\"description\"><p>This function is a binary Curve operator: It takes two Curves as arguments  \nand returns a new Curve. The two Curves are combined by using the full first  \nCurve for the first portion of the result and by using the full second Curve  \nfor the second portion of the result. The second Curve is not changed, and  \ntherefore there might be a big jump in the middle of the result Curve.</p></div></div>",
  "draw_3D_connected": "<div><h4>draw_3D_connected(numPoints: number) → {RenderFunction}</h4><div class=\"description\"><p>Returns a function that turns a given 3D Curve into a Drawing, by sampling  \nthe 3D Curve at <code>num</code> sample points and connecting each pair with  \na line. The parts between (0,0,0) and (1,1,1) of the resulting Drawing are  \nshown within the unit cube.</p></div></div>",
  "draw_3D_connected_full_view": "<div><h4>draw_3D_connected_full_view(numPoints: number) → {RenderFunction}</h4><div class=\"description\"><p>Returns a function that turns a given 3D Curve into a Drawing, by sampling  \nthe 3D Curve at <code>num</code> sample points and connecting each pair with  \na line. The Drawing is translated and stretched/shrunk to show the full  \ncurve and maximize its width and height within the cube.</p></div></div>",
  "draw_3D_connected_full_view_proportional": "<div><h4>draw_3D_connected_full_view_proportional(numPoints: number) → {RenderFunction}</h4><div class=\"description\"><p>Returns a function that turns a given 3D Curve into a Drawing, by sampling  \nthe 3D Curve at <code>num</code> sample points and connecting each pair with  \na line. The Drawing is translated and scaled proportionally with its size  \nmaximized to fit entirely inside the cube.</p></div></div>",
  "draw_3D_points": "<div><h4>draw_3D_points(numPoints: number) → {RenderFunction}</h4><div class=\"description\"><p>Returns a function that turns a given 3D Curve into a Drawing, by sampling  \nthe 3D Curve at <code>num</code> sample points. The Drawing consists of  \nisolated points, and does not connect them. The parts between (0,0,0)  \nand (1,1,1) of the resulting Drawing are shown within the unit cube.</p></div></div>",
  "draw_3D_points_full_view": "<div><h4>draw_3D_points_full_view(numPoints: number) → {RenderFunction}</h4><div class=\"description\"><p>Returns a function that turns a given 3D Curve into a Drawing, by sampling  \nthe 3D Curve at <code>num</code> sample points. The Drawing consists of  \nisolated points, and does not connect them. The Drawing is translated and  \nstretched/shrunk to maximize its size to fit entirely inside the cube.</p></div></div>",
  "draw_3D_points_full_view_proportional": "<div><h4>draw_3D_points_full_view_proportional(numPoints: number) → {RenderFunction}</h4><div class=\"description\"><p>Returns a function that turns a given 3D Curve into a Drawing, by sampling  \nthe 3D Curve at <code>num</code> sample points. The Drawing consists of  \nisolated points, and does not connect them. The Drawing is translated and  \nscaled proportionally with its size maximized to fit entirely inside the cube.</p></div></div>",
  "draw_connected": "<div><h4>draw_connected(numPoints: number) → {RenderFunction}</h4><div class=\"description\"><p>Returns a function that turns a given Curve into a Drawing, by sampling the  \nCurve at <code>num</code> sample points and connecting each pair with a line.  \nThe parts between (0,0) and (1,1) of the resulting Drawing are shown in the window.</p></div></div>",
  "draw_connected_full_view": "<div><h4>draw_connected_full_view(numPoints: number) → {RenderFunction}</h4><div class=\"description\"><p>Returns a function that turns a given Curve into a Drawing, by sampling the  \nCurve at <code>num</code> sample points and connecting each pair with a line. The Drawing is  \ntranslated and stretched/shrunk to show the full curve and maximize its width  \nand height, with some padding.</p></div></div>",
  "draw_connected_full_view_proportional": "<div><h4>draw_connected_full_view_proportional(numPoints: number) → {RenderFunction}</h4><div class=\"description\"><p>Returns a function that turns a given Curve into a Drawing, by sampling the  \nCurve at <code>num</code> sample points and connecting each pair with a line. The Drawing  \nis translated and scaled proportionally to show the full curve and maximize  \nits size, with some padding.</p></div></div>",
  "draw_points": "<div><h4>draw_points(numPoints: number) → {RenderFunction}</h4><div class=\"description\"><p>Returns a function that turns a given Curve into a Drawing, by sampling the  \nCurve at <code>num</code> sample points. The Drawing consists of isolated  \npoints, and does not connect them. The parts between (0,0) and (1,1) of the  \nresulting Drawing are shown in the window.</p></div></div>",
  "draw_points_full_view": "<div><h4>draw_points_full_view(numPoints: number) → {RenderFunction}</h4><div class=\"description\"><p>Returns a function that turns a given Curve into a Drawing, by sampling the  \nCurve at <code>num</code> sample points. The Drawing consists of isolated  \npoints, and does not connect them. The Drawing is translated and  \nstretched/shrunk to show the full curve and maximize its width and height,  \nwith some padding.</p></div></div>",
  "draw_points_full_view_proportional": "<div><h4>draw_points_full_view_proportional(numPoints: number) → {RenderFunction}</h4><div class=\"description\"><p>Returns a function that turns a given Curve into a Drawing, by sampling the  \nCurve at <code>num</code> sample points. The Drawing consists of isolated  \npoints, and does not connect them. The Drawing is translated and scaled  \nproportionally with its size maximized to fit entirely inside the window,  \nwith some padding.</p></div></div>",
  "g_of": "<div><h4>g_of(pt: Point) → {number}</h4><div class=\"description\"><p>Retrieves the green component of a given Point.</p></div></div>",
  "invert": "<div><h4>invert(curve: Curve) → {Curve}</h4><div class=\"description\"><p>This function is a Curve transformation: a function from a Curve to a Curve.  \nThe points of the result Curve are the same points as the points of the  \noriginal Curve, but in reverse: The result Curve applied to 0 is the original  \nCurve applied to 1 and vice versa.</p></div></div>",
  "make_3D_color_point": "<div><h4>make_3D_color_point(x: number, y: number, z: number, r: number, g: number, b: number) → {Point}</h4><div class=\"description\"><p>Makes a 3D color Point with given x, y and z coordinates, and RGB values  \nranging from 0 to 255. Any input lower than 0 for RGB will be rounded up to  \n0, and any input higher than 255 will be rounded down to 255.</p></div></div>",
  "make_3D_point": "<div><h4>make_3D_point(x: number, y: number, z: number) → {Point}</h4><div class=\"description\"><p>Makes a 3D Point with given x, y and z coordinates.</p></div></div>",
  "make_color_point": "<div><h4>make_color_point(x: number, y: number, r: number, g: number, b: number) → {Point}</h4><div class=\"description\"><p>Makes a color Point with given x and y coordinates, and RGB values ranging  \nfrom 0 to 255. Any input lower than 0 for RGB will be rounded up to 0, and  \nany input higher than 255 will be rounded down to 255.</p></div></div>",
  "make_point": "<div><h4>make_point(x: number, y: number) → {Point}</h4><div class=\"description\"><p>Makes a Point with given x and y coordinates.</p></div></div>",
  "put_in_standard_position": "<div><h4>put_in_standard_position(curve: Curve) → {Curve}</h4><div class=\"description\"><p>This function is a Curve transformation: It takes a Curve as argument and  \nreturns a new Curve, as follows. A Curve is in standard position if it  \nstarts at (0,0) ends at (1,0). This function puts the given Curve in  \nstandard position by rigidly translating it so its start Point is at the  \norigin (0,0), then rotating it about the origin to put its endpoint on the  \nx axis, then scaling it to put the endpoint at (1,0). Behavior is unspecified  \non closed Curves where start-point equal end-point.</p></div></div>",
  "r_of": "<div><h4>r_of(pt: Point) → {number}</h4><div class=\"description\"><p>Retrieves the red component of a given Point.</p></div></div>",
  "rotate_around_origin": "<div><h4>rotate_around_origin(theta1: number, theta2: number, theta3: number) → {CurveTransformer}</h4><div class=\"description\"><p>This function takes 3 angles, a, b and c in radians as parameter  \nand returns a Curve transformation: a function that takes a Curve as argument  \nand returns a new Curve, which is the original Curve rotated  \nextrinsically with Euler angles (a, b, c) about x, y,  \nand z axes.</p></div></div>",
  "scale": "<div><h4>scale(a: number, b: number, c: number) → {CurveTransformer}</h4><div class=\"description\"><p>This function takes scaling factors <code>a</code>, <code>b</code> and  \n<code>c</code>, as arguments and returns a  \nCurve transformation that scales a given Curve by <code>a</code> in  \nx-direction, <code>b</code> in y-direction and <code>c</code> in z-direction.</p></div></div>",
  "scale_proportional": "<div><h4>scale_proportional(s: number) → {CurveTransformer}</h4><div class=\"description\"><p>This function takes a scaling factor s argument and returns a Curve  \ntransformation that scales a given Curve by s in x, y and z direction.</p></div></div>",
  "translate": "<div><h4>translate(x0: number, y0: number, z0: number) → {CurveTransformer}</h4><div class=\"description\"><p>This function returns a Curve transformation: It takes an x-value x0, a  \ny-value y0 and a z-value z0, as arguments and  \nreturns a Curve transformation that takes a Curve as argument and returns a  \nnew Curve, by translating the original by x0 in x-direction, y0 in  \ny-direction and z0 in z-direction.</p></div></div>",
  "unit_circle": "<div><h4>unit_circle(t: number) → {Point}</h4><div class=\"description\"><p>This function is a curve: a function from a fraction t to a point. The points  \nlie on the unit circle. They start at Point (1,0) when t is 0. When t is  \n0.25, they reach Point (0,1), when t is 0.5, they reach Point (-1, 0), etc.</p></div></div>",
  "unit_line": "<div><h4>unit_line(t: number) → {Point}</h4><div class=\"description\"><p>This function is a curve: a function from a fraction t to a point. The  \nx-coordinate at fraction t is t, and the y-coordinate is 0.</p></div></div>",
  "unit_line_at": "<div><h4>unit_line_at(t: number) → {Curve}</h4><div class=\"description\"><p>This function is a Curve generator: it takes a number and returns a  \nhorizontal curve. The number is a y-coordinate, and the Curve generates only  \npoints with the given y-coordinate.</p></div></div>",
  "x_of": "<div><h4>x_of(pt: Point) → {number}</h4><div class=\"description\"><p>Retrieves the x-coordinate of a given Point.</p></div></div>",
  "y_of": "<div><h4>y_of(pt: Point) → {number}</h4><div class=\"description\"><p>Retrieves the y-coordinate of a given Point.</p></div></div>",
  "z_of": "<div><h4>z_of(pt: Point) → {number}</h4><div class=\"description\"><p>Retrieves the z-coordinate of a given Point.</p></div></div>"
}