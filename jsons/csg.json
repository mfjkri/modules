{
  "black": "<div><h4>black: string</h4><div class=\"description\"><p>A hex colour code for black (#000000).</p></div></div>",
  "blue": "<div><h4>blue: string</h4><div class=\"description\"><p>A hex colour code for blue (#5555FF).</p></div></div>",
  "cone": "<div><h4>cone: Shape</h4><div class=\"description\"><p>Primitive Shape of a cone.</p></div></div>",
  "crimson": "<div><h4>crimson: string</h4><div class=\"description\"><p>A hex colour code for dark red (#AA0000).</p></div></div>",
  "cube": "<div><h4>cube: Shape</h4><div class=\"description\"><p>Primitive Shape of a cube.</p></div></div>",
  "cyan": "<div><h4>cyan: string</h4><div class=\"description\"><p>A hex colour code for cyan (#55FFFF).</p></div></div>",
  "cylinder": "<div><h4>cylinder: Shape</h4><div class=\"description\"><p>Primitive Shape of a cylinder.</p></div></div>",
  "geodesic_sphere": "<div><h4>geodesic_sphere: Shape</h4><div class=\"description\"><p>Primitive Shape of a geodesic sphere.</p></div></div>",
  "gray": "<div><h4>gray: string</h4><div class=\"description\"><p>A hex colour code for dark grey (#555555).</p></div></div>",
  "green": "<div><h4>green: string</h4><div class=\"description\"><p>A hex colour code for green (#00AA00).</p></div></div>",
  "lime": "<div><h4>lime: string</h4><div class=\"description\"><p>A hex colour code for light green (#55FF55).</p></div></div>",
  "navy": "<div><h4>navy: string</h4><div class=\"description\"><p>A hex colour code for dark blue (#0000AA).</p></div></div>",
  "orange": "<div><h4>orange: string</h4><div class=\"description\"><p>A hex colour code for orange (#FFAA00).</p></div></div>",
  "pink": "<div><h4>pink: string</h4><div class=\"description\"><p>A hex colour code for pink (#FF55FF).</p></div></div>",
  "prism": "<div><h4>prism: Shape</h4><div class=\"description\"><p>Primitive Shape of a prism.</p></div></div>",
  "purple": "<div><h4>purple: string</h4><div class=\"description\"><p>A hex colour code for purple (#AA00AA).</p></div></div>",
  "pyramid": "<div><h4>pyramid: Shape</h4><div class=\"description\"><p>Primitive Shape of a square pyramid.</p></div></div>",
  "rose": "<div><h4>rose: string</h4><div class=\"description\"><p>A hex colour code for light red (#FF5555).</p></div></div>",
  "rounded_cube": "<div><h4>rounded_cube: Shape</h4><div class=\"description\"><p>Primitive Shape of a rounded cube.</p></div></div>",
  "rounded_cylinder": "<div><h4>rounded_cylinder: Shape</h4><div class=\"description\"><p>Primitive Shape of a rounded cylinder.</p></div></div>",
  "silver": "<div><h4>silver: string</h4><div class=\"description\"><p>A hex colour code for light grey (#AAAAAA). This is the default colour used  \nwhen storing a Shape.</p></div></div>",
  "sphere": "<div><h4>sphere: Shape</h4><div class=\"description\"><p>Primitive Shape of a sphere.</p></div></div>",
  "star": "<div><h4>star: Shape</h4><div class=\"description\"><p>Primitive Shape of an extruded star.</p></div></div>",
  "teal": "<div><h4>teal: string</h4><div class=\"description\"><p>A hex colour code for dark cyan (#00AAAA).</p></div></div>",
  "torus": "<div><h4>torus: Shape</h4><div class=\"description\"><p>Primitive Shape of a torus.</p></div></div>",
  "white": "<div><h4>white: string</h4><div class=\"description\"><p>A hex colour code for white (#FFFFFF).</p></div></div>",
  "yellow": "<div><h4>yellow: string</h4><div class=\"description\"><p>A hex colour code for yellow (#FFFF55).</p></div></div>",
  "area": "<div><h4>area(shape: Shape) → {number}</h4><div class=\"description\"><p>Measure the area of the provided shape.</p></div></div>",
  "beside_x": "<div><h4>beside_x(a: Shape, b: Shape) → {Shape}</h4><div class=\"description\"><p>Places the second shape <code>b</code> beside the first shape <code>a</code> in the positive x direction,  \ncentering the <code>b</code>'s y and z on the <code>a</code>'s y and z center.</p></div></div>",
  "beside_y": "<div><h4>beside_y(a: Shape, b: Shape) → {Shape}</h4><div class=\"description\"><p>Places the second shape <code>b</code> beside the first shape <code>a</code> in the positive y direction,  \ncentering the <code>b</code>'s x and z on the <code>a</code>'s x and z center.</p></div></div>",
  "beside_z": "<div><h4>beside_z(a: Shape, b: Shape) → {Shape}</h4><div class=\"description\"><p>Places the second shape <code>b</code> beside the first shape <code>a</code> in the positive z direction,  \ncentering the <code>b</code>'s x and y on the <code>a</code>'s x and y center.</p></div></div>",
  "bounding_box": "<div><h4>bounding_box(shape: Shape) → {undefined}</h4><div class=\"description\"><p>Returns a lambda function that contains the coordinates of the bounding box.  \nProvided with the axis 'x', 'y' or 'z' and value 'min' for minimum and 'max'  \nfor maximum, it returns the coordinates of the bounding box.  </p><p>For example  <pre><code>const a = bounding_box(sphere);  \na('x', 'min'); // Returns the maximum x coordinate of the bounding box  </code></pre>`</p></div></div>",
  "clone": "<div><h4>clone(shape: Shape) → {Shape}</h4><div class=\"description\"><p>Creates a clone of the specified Shape.</p></div></div>",
  "flip_x": "<div><h4>flip_x(shape: Shape) → {Shape}</h4><div class=\"description\"><p>Mirror / Flip the provided shape in the x direction.</p></div></div>",
  "flip_y": "<div><h4>flip_y(shape: Shape) → {Shape}</h4><div class=\"description\"><p>Mirror / Flip the provided shape in the y direction.</p></div></div>",
  "flip_z": "<div><h4>flip_z(shape: Shape) → {Shape}</h4><div class=\"description\"><p>Mirror / Flip the provided shape in the z direction.</p></div></div>",
  "intersect": "<div><h4>intersect(a: Shape, b: Shape) → {Shape}</h4><div class=\"description\"><p>Intersection of the two shape to produce a new shape.</p></div></div>",
  "is_shape": "<div><h4>is_shape(argument: unknown) → {boolean}</h4><div class=\"description\"><p>Checks if the specified argument is a Shape.</p></div></div>",
  "render": "<div><h4>render() → {RenderGroup}</h4><div class=\"description\"><p>Renders using any Shapes stored thus far. The Shapes will then not be  \nincluded in any subsequent renders.</p></div></div>",
  "render_axis": "<div><h4>render_axis() → {RenderGroup}</h4><div class=\"description\"><p>Renders using any Shapes stored thus far, along with an axis. The Shapes will  \nthen not be included in any subsequent renders.</p></div></div>",
  "render_grid": "<div><h4>render_grid() → {RenderGroup}</h4><div class=\"description\"><p>Renders using any Shapes stored thus far, along with a grid. The Shapes will  \nthen not be included in any subsequent renders.</p></div></div>",
  "render_grid_axis": "<div><h4>render_grid_axis() → {RenderGroup}</h4><div class=\"description\"><p>Renders using any Shapes stored thus far, along with a grid and axis. The  \nShapes will then not be included in any subsequent renders.</p></div></div>",
  "rotate": "<div><h4>rotate(shape: Shape, x: number, y: number, z: number) → {Shape}</h4><div class=\"description\"><p>Rotate the shape by the provided angles in the x, y and z direction.  \nAngles provided are in the form of radians (i.e. 2π represent 360  \ndegrees)</p></div></div>",
  "rotate_x": "<div><h4>rotate_x(shape: Shape, x: number) → {Shape}</h4><div class=\"description\"><p>Rotate the shape by the provided angles in the x direction. Angles  \nprovided are in the form of radians (i.e. 2π represent 360 degrees)</p></div></div>",
  "rotate_y": "<div><h4>rotate_y(shape: Shape, y: number) → {Shape}</h4><div class=\"description\"><p>Rotate the shape by the provided angles in the y direction. Angles  \nprovided are in the form of radians (i.e. 2π represent 360 degrees)</p></div></div>",
  "rotate_z": "<div><h4>rotate_z(shape: Shape, z: number) → {Shape}</h4><div class=\"description\"><p>Rotate the shape by the provided angles in the z direction. Angles  \nprovided are in the form of radians (i.e. 2π represent 360 degrees)</p></div></div>",
  "scale": "<div><h4>scale(shape: Shape, x: number, y: number, z: number) → {Shape}</h4><div class=\"description\"><p>Scales the shape in the x, y and z direction with the specified factor,  \nranging from 0 to infinity.  \nFor example scaling the shape by 1 in x, y and z direction results in  \nthe original shape.</p></div></div>",
  "scale_x": "<div><h4>scale_x(shape: Shape, x: number) → {Shape}</h4><div class=\"description\"><p>Scales the shape in the x direction with the specified factor,  \nranging from 0 to infinity.  \nFor example scaling the shape by 1 in x direction results in the  \noriginal shape.</p></div></div>",
  "scale_y": "<div><h4>scale_y(shape: Shape, y: number) → {Shape}</h4><div class=\"description\"><p>Scales the shape in the y direction with the specified factor,  \nranging from 0 to infinity.  \nFor example scaling the shape by 1 in y direction results in the  \noriginal shape.</p></div></div>",
  "scale_z": "<div><h4>scale_z(shape: Shape, z: number) → {Shape}</h4><div class=\"description\"><p>Scales the shape in the z direction with the specified factor,  \nranging from 0 to infinity.  \nFor example scaling the shape by 1 in z direction results in the  \noriginal shape.</p></div></div>",
  "shape_center": "<div><h4>shape_center(shape: Shape) → {undefined}</h4><div class=\"description\"><p>Returns a lambda function that contains the center of the given shape in the  \nx, y and z direction. Providing 'x', 'y', 'z' as input would return x, y and  \nz coordinates of shape's center  </p><p>For example  <pre><code>const a = shape_center(sphere);  \na('x'); // Returns the x coordinate of the shape's center  </code></pre>`</p></div></div>",
  "shape_set_center": "<div><h4>shape_set_center(shape: Shape, x: number, y: number, z: number) → {Shape}</h4><div class=\"description\"><p>Set the center of the shape with the provided x, y and z coordinates.</p></div></div>",
  "store": "<div><h4>store(shape: Shape) → {void}</h4><div class=\"description\"><p>Stores a clone of the specified Shape for later rendering. Its colour  \ndefaults to the module's provided silver colour variable.</p></div></div>",
  "store_as_color": "<div><h4>store_as_color(shape: Shape, hex: string) → {void}</h4><div class=\"description\"><p>Colours a clone of the specified Shape using the specified hex colour code,  \nthen stores it for later rendering. You may use one of the colour variables  \nprovided by the module, or you may specify your own custom colour code.  </p><p>Colour codes must be of the form \"#XXXXXX\" or \"XXXXXX\", where each X  \nrepresents a non-case sensitive hexadecimal number. Invalid colour codes  \ndefault to black.</p></div></div>",
  "store_as_rgb": "<div><h4>store_as_rgb(shape: Shape, redComponent: number, greenComponent: number, blueComponent: number) → {void}</h4><div class=\"description\"><p>Colours a clone of the specified Shape using the specified RGB values, then  \nstores it for later rendering.  </p><p>RGB values are clamped between 0 and 1.</p></div></div>",
  "subtract": "<div><h4>subtract(a: Shape, b: Shape) → {Shape}</h4><div class=\"description\"><p>Subtraction of the second shape from the first shape to produce a new shape.</p></div></div>",
  "translate": "<div><h4>translate(shape: Shape, x: number, y: number, z: number) → {Shape}</h4><div class=\"description\"><p>Translate / Move the shape by the provided x, y and z units from negative  \ninfinity to infinity.</p></div></div>",
  "translate_x": "<div><h4>translate_x(shape: Shape, x: number) → {Shape}</h4><div class=\"description\"><p>Translate / Move the shape by the provided x units from negative infinity  \nto infinity.</p></div></div>",
  "translate_y": "<div><h4>translate_y(shape: Shape, y: number) → {Shape}</h4><div class=\"description\"><p>Translate / Move the shape by the provided y units from negative infinity  \nto infinity.</p></div></div>",
  "translate_z": "<div><h4>translate_z(shape: Shape, z: number) → {Shape}</h4><div class=\"description\"><p>Translate / Move the shape by the provided z units from negative infinity  \nto infinity.</p></div></div>",
  "union": "<div><h4>union(a: Shape, b: Shape) → {Shape}</h4><div class=\"description\"><p>Union of the two provided shapes to produce a new shape.</p></div></div>",
  "volume": "<div><h4>volume(shape: Shape) → {number}</h4><div class=\"description\"><p>Measure the volume of the provided shape.</p></div></div>"
}