{
  "adsr": "<div><h4>adsr(attack_ratio: number, decay_ratio: number, sustain_level: number, release_ratio: number) → {SoundTransformer}</h4><div class=\"description\"><p>Returns an envelope: a function from Sound to Sound.  \nWhen the adsr envelope is applied to a Sound, it returns  \na new Sound with its amplitude modified according to parameters  \nThe relative amplitude increases from 0 to 1 linearly over the  \nattack proportion, then decreases from 1 to sustain level over the  \ndecay proportion, and remains at that level until the release  \nproportion when it decays back to 0.</p></div></div>",
  "bell": "<div><h4>bell(note: number, duration: number) → {Sound}</h4><div class=\"description\"><p>returns a Sound reminiscent of a bell, playing  \na given note for a given duration</p></div></div>",
  "cello": "<div><h4>cello(note: number, duration: number) → {Sound}</h4><div class=\"description\"><p>returns a Sound reminiscent of a cello, playing  \na given note for a given duration</p></div></div>",
  "consecutively": "<div><h4>consecutively(list_of_sounds: List) → {Sound}</h4><div class=\"description\"><p>Makes a new Sound by combining the sounds in a given list  \nwhere the second sound is appended to the end of the first sound,  \nthe third sound is appended to the end of the second sound, and  \nso on. The effect is that the sounds in the list are joined end-to-end</p></div></div>",
  "get_duration": "<div><h4>get_duration(sound: Sound) → {number}</h4><div class=\"description\"><p>Accesses the duration of a given Sound.</p></div></div>",
  "get_left_wave": "<div><h4>get_left_wave(sound: Sound) → {Wave}</h4><div class=\"description\"><p>Accesses the left wave function of a given Sound.</p></div></div>",
  "get_right_wave": "<div><h4>get_right_wave(sound: Sound) → {Wave}</h4><div class=\"description\"><p>Accesses the left wave function of a given Sound.</p></div></div>",
  "init_record": "<div><h4>init_record() → {string}</h4><div class=\"description\"><p>Initialize recording by obtaining permission  \nto use the default device microphone</p></div></div>",
  "is_sound": "<div><h4>is_sound(x: any) → {boolean}</h4><div class=\"description\"><p>Checks if the argument is a Sound</p></div></div>",
  "letter_name_to_frequency": "<div><h4>letter_name_to_frequency(note: string) → {number}</h4><div class=\"description\"><p>Converts a letter name to its corresponding frequency.</p></div></div>",
  "letter_name_to_midi_note": "<div><h4>letter_name_to_midi_note(note: string) → {number}</h4><div class=\"description\"><p>Converts a letter name to its corresponding MIDI note.  \nThe letter name is represented in standard pitch notation.  \nExamples are \"A5\", \"Db3\", \"C#7\".  \nRefer to &lt;a href=\"https://i.imgur.com/qGQgmYr.png\"&gt;this mapping from  \nletter name to midi notes.</p></div></div>",
  "make_sound": "<div><h4>make_sound(wave: Wave, duration: number) → {Sound}</h4><div class=\"description\"><p>Makes a Sound with given wave function and duration.  \nThe wave function is a function: number -&gt; number  \nthat takes in a non-negative input time and returns an amplitude  \nbetween -1 and 1.</p></div></div>",
  "make_stereo_sound": "<div><h4>make_stereo_sound(left_wave: Wave, right_wave: Wave, duration: number) → {Sound}</h4><div class=\"description\"><p>Makes a Stereo Sound with given wave function and duration.  \nThe wave function is a function: number -&gt; number  \nthat takes in a non-negative input time and returns an amplitude  \nbetween -1 and 1.</p></div></div>",
  "midi_note_to_frequency": "<div><h4>midi_note_to_frequency(note: number) → {number}</h4><div class=\"description\"><p>Converts a MIDI note to its corresponding frequency.</p></div></div>",
  "noise_sound": "<div><h4>noise_sound(duration: number) → {Sound}</h4><div class=\"description\"><p>Makes a noise sound with given duration</p></div></div>",
  "pan": "<div><h4>pan(amount: number) → {SoundTransformer}</h4><div class=\"description\"><p>Returns a Sound Transformer that pans a sound based on the pan amount.  \nThe input sound is first squashed to mono.  \nAn amount of <code>-1</code> is a hard left pan, <code>0</code> is balanced, <code>1</code> is hard right pan.</p></div></div>",
  "pan_mod": "<div><h4>pan_mod(modulator: Sound) → {SoundTransformer}</h4><div class=\"description\"><p>Returns a Sound Transformer that uses a Sound to pan another Sound.  \nThe modulator is treated as a mono sound and its output is used to pan  \nan input Sound.  \n<code>-1</code> is a hard left pan, <code>0</code> is balanced, <code>1</code> is hard right pan.</p></div></div>",
  "phase_mod": "<div><h4>phase_mod(freq: number, duration: number, amount: number) → {SoundTransformer}</h4><div class=\"description\"><p>Returns a SoundTransformer which uses its argument  \nto modulate the phase of a (carrier) sine wave  \nof given frequency and duration with a given Sound.  \nModulating with a low frequency Sound results in a vibrato effect.  \nModulating with a Sound with frequencies comparable to  \nthe sine wave frequency results in more complex wave forms.</p></div></div>",
  "piano": "<div><h4>piano(note: number, duration: number) → {Sound}</h4><div class=\"description\"><p>returns a Sound reminiscent of a piano, playing  \na given note for a given duration</p></div></div>",
  "play": "<div><h4>play(sound: Sound) → {AudioPlayed}</h4><div class=\"description\"><p>Plays the given Sound using the computer’s sound device.  \nThe sound is only played if no other sounds are currently being played.</p></div></div>",
  "play_concurrently": "<div><h4>play_concurrently(sound: Sound) → {void}</h4><div class=\"description\"><p>Plays the given Sound using the computer’s sound device  \non top of any sounds that are currently playing.</p></div></div>",
  "play_wave": "<div><h4>play_wave(wave: Wave, duration: number) → {AudioPlayed}</h4><div class=\"description\"><p>Plays the given Wave using the computer’s sound device, for the duration  \ngiven in seconds.  \nThe sound is only played if no other sounds are currently being played.</p></div></div>",
  "play_waves": "<div><h4>play_waves(wave1: Wave, wave2: Wave, duration: number) → {AudioPlayed}</h4><div class=\"description\"><p>Plays the given two Waves using the computer’s sound device, for the duration  \ngiven in seconds. The first Wave is for the left channel, the second for the  \nright channel.  \nThe sound is only played if no other sounds are currently being played.</p></div></div>",
  "record": "<div><h4>record(buffer: number) → {undefined}</h4><div class=\"description\"><p>takes a &lt;CODE&gt;buffer&lt;/CODE&gt; duration (in seconds) as argument, and  \nreturns a nullary stop function &lt;CODE&gt;stop&lt;/CODE&gt;. A call  \n&lt;CODE&gt;stop()&lt;/CODE&gt; returns a sound promise: a nullary function  \nthat returns a sound. Example: &lt;PRE&gt;&lt;CODE&gt;init_record();  \nconst stop = record(0.5);  \n// record after 0.5 seconds. Then in next query:  \nconst promise = stop();  \n// In next query, you can play the promised sound, by  \n// applying the promise:  \nplay(promise());&lt;/CODE&gt;&lt;/PRE&gt;</p></div></div>",
  "record_for": "<div><h4>record_for(duration: number, buffer: number) → {undefined}</h4><div class=\"description\"><p>Records a sound of given &lt;CODE&gt;duration&lt;/CODE&gt; in seconds, after  \na &lt;CODE&gt;buffer&lt;/CODE&gt; also in seconds, and  \nreturns a sound promise: a nullary function  \nthat returns a sound. Example: &lt;PRE&gt;&lt;CODE&gt;init_record();  \nconst promise = record_for(2, 0.5);  \n// In next query, you can play the promised sound, by  \n// applying the promise:  \nplay(promise());&lt;/CODE&gt;&lt;/PRE&gt;</p></div></div>",
  "sawtooth_sound": "<div><h4>sawtooth_sound(freq: number, duration: number) → {Sound}</h4><div class=\"description\"><p>Makes a sawtooth wave sound with given frequency and duration</p></div></div>",
  "silence_sound": "<div><h4>silence_sound(duration: number) → {Sound}</h4><div class=\"description\"><p>Makes a silence sound with given duration</p></div></div>",
  "simultaneously": "<div><h4>simultaneously(list_of_sounds: List) → {Sound}</h4><div class=\"description\"><p>Makes a new Sound by combining the sounds in a given list  \nwhere all the sounds are overlapped on top of each other.</p></div></div>",
  "sine_sound": "<div><h4>sine_sound(freq: number, duration: number) → {Sound}</h4><div class=\"description\"><p>Makes a sine wave sound with given frequency and duration</p></div></div>",
  "square_sound": "<div><h4>square_sound(f: number, duration: number) → {Sound}</h4><div class=\"description\"><p>Makes a square wave sound with given frequency and duration</p></div></div>",
  "squash": "<div><h4>squash(sound: Sound) → {Sound}</h4><div class=\"description\"><p>Centers a Sound by averaging its left and right channels,  \nresulting in an effectively mono sound.</p></div></div>",
  "stacking_adsr": "<div><h4>stacking_adsr(waveform: SoundProducer, base_frequency: number, duration: number, envelopes: List) → {Sound}</h4><div class=\"description\"><p>Returns a Sound that results from applying a list of envelopes  \nto a given wave form. The wave form is a Sound generator that  \ntakes a frequency and a duration as arguments and produces a  \nSound with the given frequency and duration. Each envelope is  \napplied to a harmonic: the first harmonic has the given frequency,  \nthe second has twice the frequency, the third three times the  \nfrequency etc. The harmonics are then layered simultaneously to  \nproduce the resulting Sound.</p></div></div>",
  "stop": "<div><h4>stop() → {void}</h4><div class=\"description\"><p>Stops all currently playing sounds.</p></div></div>",
  "triangle_sound": "<div><h4>triangle_sound(freq: number, duration: number) → {Sound}</h4><div class=\"description\"><p>Makes a triangle wave sound with given frequency and duration</p></div></div>",
  "trombone": "<div><h4>trombone(note: number, duration: number) → {Sound}</h4><div class=\"description\"><p>returns a Sound reminiscent of a trombone, playing  \na given note for a given duration</p></div></div>",
  "violin": "<div><h4>violin(note: number, duration: number) → {Sound}</h4><div class=\"description\"><p>returns a Sound reminiscent of a violin, playing  \na given note for a given duration</p></div></div>"
}