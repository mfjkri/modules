{
  "alpha_of": "<div><h4>alpha_of(pixel: Pixel) → {number}</h4><div class=\"description\"><p>Returns the alpha component of the given pixel.</p></div></div>",
  "blue_of": "<div><h4>blue_of(pixel: Pixel) → {number}</h4><div class=\"description\"><p>Returns the blue component of the given pixel.</p></div></div>",
  "compose_filter": "<div><h4>compose_filter(filter1: Filter, filter2: Filter) → {Filter}</h4><div class=\"description\"><p>Returns a new filter that is equivalent to applying  \nfilter1 and then filter2.</p></div></div>",
  "copy_image": "<div><h4>copy_image(src: Pixels, dest: Pixels) → {void}</h4><div class=\"description\"><p>The default filter that just copies the source image to the  \ndestination image.</p></div></div>",
  "get_video_time": "<div><h4>get_video_time() → {number}</h4><div class=\"description\"><p>Returns the elapsed time in milliseconds since the start of the video.</p></div></div>",
  "green_of": "<div><h4>green_of(pixel: Pixel) → {number}</h4><div class=\"description\"><p>Returns the green component of the given pixel.</p></div></div>",
  "image_height": "<div><h4>image_height() → {number}</h4><div class=\"description\"><p>Returns the current height of the displayed images in  \npixels, i.e. the number of pixels in the vertical dimension.</p></div></div>",
  "image_width": "<div><h4>image_width() → {number}</h4><div class=\"description\"><p>Returns the current width of the displayed images in  \npixels, i.e. the number of pixels in the horizontal dimension.</p></div></div>",
  "install_filter": "<div><h4>install_filter(_filter: Filter) → {void}</h4><div class=\"description\"><p>Installs the given filter to be used to transform each source image from  \nthe live camera or from a local/remote file to a destination image that  \nis then displayed on screen.  </p><p>A filter is a function that is applied to two  \ntwo-dimensional arrays of Pixels:  \nthe source image and the destination image.</p></div></div>",
  "keep_aspect_ratio": "<div><h4>keep_aspect_ratio(_keepAspectRatio: boolean) → {void}</h4><div class=\"description\"><p>Sets pix_n_flix to preserve the aspect ratio of the video or image</p></div></div>",
  "pause_at": "<div><h4>pause_at(pause_time: number) → {void}</h4><div class=\"description\"><p>Pauses the video at a set time after the video starts.</p></div></div>",
  "red_of": "<div><h4>red_of(pixel: Pixel) → {number}</h4><div class=\"description\"><p>Returns the red component of the given pixel.</p></div></div>",
  "reset_filter": "<div><h4>reset_filter() → {void}</h4><div class=\"description\"><p>Resets the installed filter to the default filter.</p></div></div>",
  "set_dimensions": "<div><h4>set_dimensions(width: number, height: number) → {void}</h4><div class=\"description\"><p>Sets the diemsions of the displayed images.  \nNote: Only accepts width and height values within the range of 1 to 500.</p></div></div>",
  "set_fps": "<div><h4>set_fps(fps: number) → {void}</h4><div class=\"description\"><p>Sets the framerate (i.e. frames per second (FPS)) of the video.  \nNote: Only accepts FPS values within the range of 2 to 30.</p></div></div>",
  "set_loop_count": "<div><h4>set_loop_count(n: number) → {void}</h4><div class=\"description\"><p>Sets the number of times the video is played.  \nIf the number of times the video repeats is negative, the video will loop forever.</p></div></div>",
  "set_rgba": "<div><h4>set_rgba(pixel: Pixel, r: number, g: number, b: number, a: number) → {void}</h4><div class=\"description\"><p>Assigns the given red, green, blue and alpha component values to  \nthe given pixel.</p></div></div>",
  "set_volume": "<div><h4>set_volume(volume: number) → {void}</h4><div class=\"description\"><p>Sets the audio volume of the local video file played.  \nNote: Only accepts volume value within the range of 0 to 100.</p></div></div>",
  "start": "<div><h4>start() → {StartPacket}</h4><div class=\"description\"><p>Starts processing the image or video using the installed filter.</p></div></div>",
  "use_image_url": "<div><h4>use_image_url(URL: string) → {void}</h4><div class=\"description\"><p>Sets pix_n_flix to use the image from the given URL as the image feed  \ninstead of using the default live camera feed.</p></div></div>",
  "use_local_file": "<div><h4>use_local_file() → {void}</h4><div class=\"description\"><p>Sets pix_n_flix to use video or image feed from a local file  \ninstead of using the default live camera feed.</p></div></div>",
  "use_video_url": "<div><h4>use_video_url(URL: string) → {void}</h4><div class=\"description\"><p>Sets pix_n_flix to use the video from the given URL as the video feed  \ninstead of using the default live camera feed.</p></div></div>"
}